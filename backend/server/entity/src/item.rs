//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(
    rs_type = "String",
    db_type = "String(StringLen::None)",
    rename_all = "PascalCase"
)]
pub enum Record {
    #[sea_orm(string_value = "QR")]
    Qr,
    #[sea_orm(string_value = "Barcode")]
    Barcode,
    #[sea_orm(string_value = "Nothing")]
    Nothing,
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "item")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub visible_id: String,
    pub name: String,
    pub product_number: String,
    #[sea_orm(unique)]
    pub photo_url: String,
    pub record: String,
    pub description: String,
    pub year_purchased: Option<i32>,
    pub connector: Json,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::label::Entity",
        from = "Column::VisibleId",
        to = "super::label::Column::VisibleId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Label,
}

impl Related<super::label::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Label.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
