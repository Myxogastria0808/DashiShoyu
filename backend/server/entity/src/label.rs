//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use utoipa::ToSchema;

#[derive(
    Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize, ToSchema,
)]
#[sea_orm(
    rs_type = "String",
    db_type = "String(StringLen::None)",
    rename_all = "PascalCase"
)]
pub enum Color {
    Red,
    Orange,
    Brown,
    SkyBlue,
    Blue,
    Green,
    Yellow,
    Purple,
    Pink,
}

impl Color {
    pub const COLOR_PALETTE: [Color; 9] = [
        Color::Red,
        Color::Orange,
        Color::Brown,
        Color::SkyBlue,
        Color::Blue,
        Color::Green,
        Color::Yellow,
        Color::Purple,
        Color::Pink,
    ];
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, ToSchema)]
#[sea_orm(table_name = "label")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub visible_id: String,
    pub color: Color,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::item::Entity")]
    Item,
}

impl Related<super::item::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Item.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
